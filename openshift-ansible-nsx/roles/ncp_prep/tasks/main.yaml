---
- name: Download CNI rpm
  get_url:
    url: "{{ cni_url }}"
    dest: /tmp/cni.rpm

- name: Install CNI
  yum:
    name: /tmp/cni.rpm
    state: present

- name: Download OVS
  get_url:
    url: "{{ ovs_url }}"
    dest: /tmp/ovs.rpm

- name: Download OVS kmod
  get_url:
    url: "{{ kmod_ovs_url }}"
    dest: /tmp/kmod_ovs.rpm

- name: Install OVS
  yum:
    name: /tmp/ovs.rpm
    state: present
  tags: ovs

- name: Install OVS Kernel Module
  yum:
    name: /tmp/kmod_ovs.rpm
    state: present

# https://docs.ansible.com/ansible/systemd_module.html
# systemctl start openvswitch.service
- name: Start OVS service
  systemd:
    name: openvswitch
    state: started

- name: Create OVS bridge
  openvswitch_bridge: bridge=br-int state=present fail_mode=standalone
  args:
    external_ids:
        bridge-id: "br-int"
  tags: ovs

- name: Add the Uplink Port to OVS
  openvswitch_port:
    bridge: br-int
    port: "{{ uplink_port }}"
    state: present
    set: Interface {{ uplink_port }} ofport_request=1
  tags: ovs

- name: Bring up br-int
  command: "ip link set br-int up"

- name: Bring up node-if
  command: "ip link set {{ uplink_port }} up"

## Get NCP tar file and make it docker image
- name: Download ncp image tar file
  get_url:
    url: "{{ ncp_image_url }}"
    dest: /tmp/nsx_ncp_rhel.tar
    force: no

- name: Install docker-py
  pip:
    name: docker-py

# Using docker_image to load tar file to docker image
- name: Load image from the image tar file
  docker_image:
    name: nsx_ncp_rhel
    timeout: 300
    state: present
    load_path: /tmp/nsx_ncp_rhel.tar

- name: Register the docker image name
  shell: docker images | grep nsx-ncp-rhel
  register: nsx_ncp_rhel

- name: Tag image as nsx-ncp
  shell: docker tag "{{ nsx_ncp_rhel.stdout.split()[0] }}" nsx-ncp

- name: Download NCP yaml
  get_url:
    url: "{{ ncp_yaml_url }}"
    dest: /tmp/ncp-rc.yml
    force: yes